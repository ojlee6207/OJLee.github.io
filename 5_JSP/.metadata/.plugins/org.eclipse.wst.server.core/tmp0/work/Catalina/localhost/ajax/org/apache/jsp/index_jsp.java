/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-04-01 07:59:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Ajax Project</title>\r\n");
      out.write("</head>\r\n");
      out.write("<!-- jQuery -->\r\n");
      out.write("<script\r\n");
      out.write("  src=\"https://code.jquery.com/jquery-3.7.1.min.js\"\r\n");
      out.write("  integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\"\r\n");
      out.write("  crossorigin=\"anonymous\">\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<bo>\r\n");
      out.write("	<h1>Ajax 통신</h1>\r\n");
      out.write("	<p>\r\n");
      out.write("		<i>\"Asynchronous JavaScript And XML\"</i>의 약자로<br>\r\n");
      out.write("		서버로부터 데이터를 가져와 전체 페이지를 바꾸지 않고 일부만 로드하여 변경하도록 함\r\n");
      out.write("		<hr>\r\n");
      out.write("		기존에는 a태그를 사용하거나, form태그의 submit 요청 방식은 \"동기식\" 요청 => 응답페이지가 전달되어야 확인 가능\r\n");
      out.write("		<br><br>\r\n");
      out.write("		* 동기식 vs 비동기식\r\n");
      out.write("		* 동기식\r\n");
      out.write("			<ul>\r\n");
      out.write("				<li>\r\n");
      out.write("					요청 처리 후 해당 응답페이지가 전달된 후에 그 다음 작업 가능\r\n");
      out.write("				</li>\r\n");
      out.write("				<li>\r\n");
      out.write("					서버에 요청한 결과에 따라 응답이 지연되면 무작정 기다린다.(하얀 화면 표시될 것)\r\n");
      out.write("				</li>\r\n");
      out.write("				<li>\r\n");
      out.write("					전체 페이지를 응답하기 때문에 기본적으로 깜박거림이 있음\r\n");
      out.write("				</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("		* 비동기식 (ajax)\r\n");
      out.write("			<ul>\r\n");
      out.write("				<li>\r\n");
      out.write("					현재페이지를 그대로 유지하면서 추가적으로 필요한 요청이 있는 경우 사용\r\n");
      out.write("				</li>\r\n");
      out.write("				<li>\r\n");
      out.write("					요청시 다른 페이지로 연결되지 않음 (현재 페이지 유지)\r\n");
      out.write("				</li>\r\n");
      out.write("				<li>요청을 하고 해당응답(데이터)이 돌아올떄까지 기다리지 않고 다른 작업 가능</li>\r\n");
      out.write("				<li>페이지 깜빡거림이 없음</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("			ex) 검색어 자동완성, 아이디 중복체크, 찜하기/ 해제하기, 추천, 댓글 등 <br><br>\r\n");
      out.write("		* 비동기식 단점 <br>\r\n");
      out.write("		<ol>\r\n");
      out.write("			<li>현재 페이지에 지속적으로 리소스가 쌓임 => 페이지가 느려짐</li>\r\n");
      out.write("			<li>오류 발생시 디버깅 어려움</li>\r\n");
      out.write("			<li>요청 처리후 응답된 데이터를 가지고 새로운 요소(태그)를 만들어서 화면에 표시하게 함<br>\r\n");
      out.write("			==> DOM 요소들을 새로 만드는 구문을 잘 익혀둬야 함 </li>\r\n");
      out.write("		</ol>\r\n");
      out.write("		<br><br>\r\n");
      out.write("		* AJAX 구현 방식 => 순수 자바스크립트 방식(브라우저마다 방식을 다르게 해야할 수도 있음)\r\n");
      out.write("		* jQuery방식(코드가 간결하고 사용하기 쉬움)\r\n");
      out.write("	</p>\r\n");
      out.write("\r\n");
      out.write("	<pre>\r\n");
      out.write("		*jQuery방식으로 AJAX 통신\r\n");
      out.write("\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			속성명: 속성값,\r\n");
      out.write("			속성명: 속성값,\r\n");
      out.write("			속성명: 속성값,\r\n");
      out.write("			...\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		- 주요 속성\r\n");
      out.write("			+ url : 요청할 주소(url)\r\n");
      out.write("			+ type/method : 요청 전송 방식 (get/post)\r\n");
      out.write("			+ data : 요청 시 전달할 값\r\n");
      out.write("			+ success : 통신 성공 시 실행할 함수 정의\r\n");
      out.write("			+ error : 통신 실패 시 실행할 함수 정의\r\n");
      out.write("			+ complete : 통신 성공/실패 상관없이 무조건 실행할 함수 정의\r\n");
      out.write("		\r\n");
      out.write("		- 부수적인 속성\r\n");
      out.write("			+ async : 서버와의 비동기 처리 방식 설정 여부 (기본값: true)\r\n");
      out.write("			+ contentType : 요청 시 데이터 인코딩 방식 (request 데이터 인코딩)\r\n");
      out.write("			+ dataType : 서버에서 응답 시 전달되는 데이터 형 설정, 값이 없다면 자동으로 판단됨\r\n");
      out.write("							* xml : 트리 형태의 데이터 구조\r\n");
      out.write("							* json : 맵 형태의 데이터 구조 (일반적인 데이터 구조)\r\n");
      out.write("							* script : 자바스크립트 및 일반 문자열 형태 데이터\r\n");
      out.write("							* html : html 태그 자체를 리턴하는 방식\r\n");
      out.write("							* text : 문자열 데이터\r\n");
      out.write("			+ accept : 파라미터 타입 설정 ( 사용자 특화된 파라미터 타입 설정 가능 )\r\n");
      out.write("			+ beforeSend : 요청 전 실행되는 이벤트 콜백 함수 (데이터 가공 및 헤더 관련 설정)\r\n");
      out.write("			+ cache : 요청 및 결과값을 스코프(scope)에서 가지고 있지 않게 하는 것 (기본값: true)\r\n");
      out.write("			+ contents : jQuery에서 응답의 데이터를 파싱하는 방식 정의\r\n");
      out.write("			+ crossDomain : 다른 도메인 호출 가능 여부 설정 (기본값: false)\r\n");
      out.write("			+ dataFilter : 응답을 받았을 때 정상적인 값을 리턴할 수 있도록 데이터와 데이터 타입 설정\r\n");
      out.write("			+ global : 기본 이벤트 사용 여부 (ajaxStart, ajaxStop), 버퍼링 같이 시작과 끝을 나타낼때 선처리 작업\r\n");
      out.write("			+ password : 서버에 접속 권한(비밀번호)이 필요한 경우 설정\r\n");
      out.write("			+ processData : 서버로 보내는 값에 대한 형태 설정 여부 (기본 데이터를 원하는 경우 false로 설정)\r\n");
      out.write("			+ timeout : 서버 요청 시 응답 대기 시간 (단위: milisecond)\r\n");
      out.write("	</pre>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h1>jQuery 방식을 이용한 AJAX 테스트</h1>\r\n");
      out.write("\r\n");
      out.write("	<h3>1. 버튼 클릭 시 get 방식으로 서버에 요청 및 응답</h3>\r\n");
      out.write("	입력 : <input type=\"text\" id=\"input1\">\r\n");
      out.write("	<button id=\"btn1\">전송</button>\r\n");
      out.write("	<br>\r\n");
      out.write("	응답 : <span id=\"output1\"></span>\r\n");
      out.write(" \r\n");
      out.write("	<script>\r\n");
      out.write("		$(function(){\r\n");
      out.write("			$(\"#btn1\").click(function(){\r\n");
      out.write("				// 기존 동기식 통신\r\n");
      out.write("				// location.href = 'jqAjax1.do?input1=' + $(\"#input1\").val() + '&test=1000';\r\n");
      out.write("\r\n");
      out.write("				// 비동기식 통신(ajax)\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url: 'jqAjax1.do',\r\n");
      out.write("					data: {\r\n");
      out.write("						input: $(\"#input1\").val()\r\n");
      out.write("						// test: 1000\r\n");
      out.write("					},\r\n");
      out.write("					type: 'get',\r\n");
      out.write("					success: function(result){	// 통신 성공 시 실행\r\n");
      out.write("						console.log(\"통신 성공\");\r\n");
      out.write("					\r\n");
      out.write("						console.log(result);\r\n");
      out.write("						\r\n");
      out.write("						$(\"#output1\").text(result);\r\n");
      out.write("					},\r\n");
      out.write("					error: function(){		// 통신 실패 시 실행\r\n");
      out.write("						console.log(\"통신 실패\")\r\n");
      out.write("					},\r\n");
      out.write("					complete: function(){	// 통신 성공/실패에 관계없이 무조건 실행\r\n");
      out.write("						console.log(\"통신 성공/실패 상관없이 실행\")\r\n");
      out.write("					}\r\n");
      out.write("				})\r\n");
      out.write("			})\r\n");
      out.write("		});\r\n");
      out.write("	</script> \r\n");
      out.write("\r\n");
      out.write("	<br>\r\n");
      out.write("	<h3> 2. 버튼 클릭 시 post 방식으로 서버에 여러 개 데이터 전송 및 응답</h3>\r\n");
      out.write("	이름 : <input type=\"text\" id=\"name\"> <br>\r\n");
      out.write("	나이 : <input type=\"number\" id=\"age\"> <br>\r\n");
      out.write("	<button onclick=\"sendPostData()\">전송</button>\r\n");
      out.write("	응답 : <div id=\"output2\"></div>\r\n");
      out.write("	<!--  1) 문자열로 응답받았을 경우 처리\r\n");
      out.write("	<script>\r\n");
      out.write("		// 함수 정의 방식\r\n");
      out.write("		const sendPostData = () => {\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: 'jqAjax2.do',\r\n");
      out.write("				data: {\r\n");
      out.write("					name: $(\"#name\").val(),\r\n");
      out.write("					age: $(\"#age\").val()\r\n");
      out.write("				},\r\n");
      out.write("				type: 'post',\r\n");
      out.write("				success: function(result) {\r\n");
      out.write("					console.log(typeof result);\r\n");
      out.write("\r\n");
      out.write("					// .innerHTML => .html()\r\n");
      out.write("					// .innerText => .text()\r\n");
      out.write("					$(\"output2\").text(result);\r\n");
      out.write("				\r\n");
      out.write("					// 입력받은 요소를 초기화\r\n");
      out.write("					// .value => val()\r\n");
      out.write("					$(\"#name\").val(\"\");\r\n");
      out.write("					$(\"#age\").val(\"\");\r\n");
      out.write("				},\r\n");
      out.write("				error: function(err) {\r\n");
      out.write("					console.log(\"POST 테스트#1 통신 실패!\");\r\n");
      out.write("					console.log(err);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("	</script> -->\r\n");
      out.write("	<!--  -->\r\n");
      out.write("	<script>\r\n");
      out.write("		const sendPostData = () => {\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: 'jqAjax2.do',\r\n");
      out.write("				data: {\r\n");
      out.write("					name: $(\"#name\").val(),\r\n");
      out.write("					age: $(\"#age\").val()\r\n");
      out.write("				},\r\n");
      out.write("				type: 'post',\r\n");
      out.write("				success: function(result) {\r\n");
      out.write("					console.log(typeof result);\r\n");
      out.write("	\r\n");
      out.write("					// JSONArray type으로 응답\r\n");
      out.write("					/*\r\n");
      out.write("					for (let val of result) {\r\n");
      out.write("						$(\"#output2\").append(\"<li>\"+val+\"</li>\");\r\n");
      out.write("					}\r\n");
      out.write("					*/\r\n");
      out.write("					// JSONObject 타입으로 응답시 처리 => { name:\"홍길동\", age:20}\r\n");
      out.write("					const value = \"<li>\"+result.name+\"</li>\"\r\n");
      out.write("								+ \"<li>\"+result.age+\"</li>\";\r\n");
      out.write("					$(\"#output2\").html(value);\r\n");
      out.write("				},\r\n");
      out.write("				error: function(err) {\r\n");
      out.write("					console.log(\"POST 테스트#1 통신 실패!\");\r\n");
      out.write("					console.log(err);\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	<br>\r\n");
      out.write("	<h3>3. 서버에 데이터 전송 후 vo객체로 응답받기</h3>\r\n");
      out.write("	회원 번호 : <input type=\"number\" id=\"userNo\" />\r\n");
      out.write("	<button onclick=\"searchUser()\">조회</button>\r\n");
      out.write("	<div id=\"output3\"></div>\r\n");
      out.write("	<script>\r\n");
      out.write("		function searchUser() {\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: 'jqAjax3.do',\r\n");
      out.write("				data: { userNo: $(\"#userNo\").val() },\r\n");
      out.write("				success: function(result){\r\n");
      out.write("                    $(\"#output3\").text(\"회원 정보: \" + result.userName \r\n");
      out.write("                    		+ \", \" + result.age + \"세, \" + result.gender);\r\n");
      out.write("				},\r\n");
      out.write("				error: function(){\r\n");
      out.write("					console.log(\"통신 실패#3 : 회원번호 조회\")\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<br><br><br><br><br><br><br><br><br><br><br><br> \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
