<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ page import= "java.util.ArrayList, com.kh.model.vo.Person" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Core Library</title>
</head>
<body>
	<h1> JSTL Core Library </h1>
	
	<h3>1. 변수 (속성 == Attribute)</h3>
	<pre>
		* 변수 선언과 동시에 초기화 (c:set var="변수명" value="데이터(값)" [scope="객체영역"])
			- 변수를 선언하고 초기값을 대입하는 기능 제공
			- 해당 변수를 어떤 scope에 저장할 지 지정 가능 (생략 시 pageScope에 저장)
		=> 따라서, 해당 scope에 setAttribute를 통해 key/value 형태로 데이터를 저장하는 것과 동일하게 처리됨
		=> c:set 으로 선언된 변수는 EL로만 접근 가능 (스크립팅 원소로 접근 불가)
		
		- 변수 타입을 별도로 지정하지 않음
		- 초기값을 반드시 지정해줘야 함
	</pre>
	
	<%-- num1 이라는 변수에 10이라는 값을 저장 --%>
	<c:set var="num1" value="10" />
	<%-- pageScope.setAttribute("num1", "10"); --%>
	
	<%-- request영역에 num2 변수에 20이라는 값을 저장 --%>
	<c:set var="num2" value="20" scope="request"/>
	<%-- request.setAttribute("num2", "20"); --%>
	
	num1 : ${ num1 }<br>
	num2 : ${ num2 }<br>
	
	<%-- num1과 num2의 합을 저장한 addNum 변수를 session 영역에 저장 --%>
	<c:set var="addNum" value="${ num1 + num2 }" scope="session"/>
	addNum : ${ addNum }<br>
	
	<%-- num1, num2, addNum --%>
	> ${ pageScope.num1 }<br>
	> ${ requestScope.num2 }<br>
	> ${ sessionScope.addNum }<br>
	> ${ requestScope.addNum }<br>
	
	<%-- value 속성 대신 시작태그와 종료태그 사이에 초기값 지정 가능 --%>
	<c:set var="addNum" scope="request">
	999
	</c:set>
	> ${ requestScope.addNum }
	<hr>
	
	<pre>
		* 변수 삭제 (c:remove var="제거하고자하는_변수명" [scope=""])
			- 해당 scope 영역에 해당 변수를 찾아 제거하는 태그
			- scope 속성을 생략 시 모든 scope영역에서 해당 변수를 모두 제거
		=> 따라서, 해당 scope에 .removeAttribute 를 통해 제거하는 것과 동일하게 처리됨
	</pre>
	- 제거 전 addNum : ${ addNum }<br>
	* 특정 scope를 지정하여 삭제<br>
	<%-- request 영역의 addNum 변수를 제거 --%>
	<c:remove var="addNum" scope="request"/>
	- request 영역에서 제거 후 addNum : ${ addNum }<br>
	<br>
	* 모든 scope 에서 제거<br>
	<%-- 모든 addNum 변수를 제거 --%>
	<c:remove var="addNum" />
	- 모두 제거 후 addNum : ${ addNum }<br>
	<hr>
	<pre>
		* 변수(데이터) 출력 (c:out value="출력하고자하는_값" [default="기본값"] [escapeXml="true|false"])
			- 데이터를 출력하고자 할 때 사용하는 태그
	</pre>
	
	<%-- addNum 변수에 저장된 값 출력 --%>
	<c:out value="${ addNum }" />
	<c:out value="${ addNum }" default="없음" />
	<br>
	<%-- outData라는 변수에 "<b>강조하는 태그!</b>" 저장 후 out태그를 사용하여 화면에 출력 --%>
	<c:set var="outData" value="<b>강조하는태그!</b>" />
	<c:out value="${ outData }" /><br>
	<c:out value="${ outData }" escapeXml="false" />
	<%-- escapleXml 속성 생략 시 기본 값:true => 출력 데이터에 태그가 포함된 경우 해석 안 됨(문자열로 처리) --%>
	<hr>
	
	<h3>2.조건문 - if (c:if test="조건식")</h3>
	<pre>
		* Java의 If문과 비슷한 역할
		* 조건식: test 속성에 작성한다. (이때, 조건식은 EL 구문 사용해야함!)
	</pre>
	<%-- 스트립트릿 방식: num1의 값이 num2의 값보다 큰 지? --%>
	<%-- JSTL로 선언한 변수로는 접근이 불가
	<% if(num1 > num2) { %>
	<% } %>
	 --%>
	 
	<%-- num1이 num2보다 크다면 "num1이 num2보다 크다." --%>
	<c:if test="${ num1 gt num2 }">num1이 num2보다 크다</c:if>
	<c:if test="${ num1 lt num2 }">num1이 num2보다 작다</c:if>
	
	<br>
	<c:set var="hi" value="안녕" />
	<%-- 
	<% if(hi.equals("안녕!")) { %>
	<% } %>
	 --%>
	<%-- hi 변수의 값이 안녕!과 일치하면 "hi hi hi" 출력, 아니면 "bye bye bye" --%>
	<c:if test="${ hi eq '안녕' }">hi hi hi</c:if>
	<c:if test="${ hi ne '안녕'}">bye bye bye</c:if>
	<br>
	<h3>3. 조건문 - Choose (c:choose, c:when, c:otherwise)</h3>
	<pre>
		* Java의 if-else, if-else if 문과 같은 역할
		* 각 조건들을 c:choose 하위 요소로 c:when을 사용하여 작성
		* else의 역할 => c:otherwise
	</pre>
	<%-- num1이 20보다 크면 "num1은 20보다 큽니다"
		 10보다 크면 "num1은 10이상입니다. "
		 그렇지 않으면 "num1은 10보다 작습니다" --%>
	<%-- 
	<% if(num1 >20) { %>
	<% } else if (num1 > 10) {%>
	<% } else { %>
	<% } %>
	--%>
	<c:choose>
		<c:when test= "${ num1 > 20 }"> num1은 20보다 큽니다</c:when>
		<c:when test= "${ num1 >= 10 }"> num1은 10 이상이다.</c:when>
		<c:otherwise> num1은 10보다 작습니다 </c:otherwise>
	</c:choose>
	<hr>
	<h3>4. 반복문 - forEach</h3>
	<pre>
		for loop 문 - (c:forEach var ="변수명" begin="초기값" end="끝값" [step="반복 시 증가값"])
		
		향상된 for문 - (c:forEach var="변수명" items="순차적으로 접근하고자 하는 객체(배열/컬렉션)"
										[varStatus="현재 접근된 요소의 상태값을 보관하는 변수명"])
	</pre>
	<%--
	<% for(int i=1; i<=10; i++) { %>
		<p>i의 값은 ---&gt; <%= i %></p>
	<% } %>
	--%>
	<c:forEach var="i" begin="1" end="10">
		i의 값은 ${ i }<br>
	</c:forEach>	
	
	<%-- h1~h6 태그 출력 "나는 hx입니다."--%>
	<c:forEach var="i" begin="1" end="6">
		<h${i}>나는 h${i}태그 입니다.</h${i}>
	</c:forEach>
	
	<c:set var="fruits">
		사과, 딸기, 바나나, 메론
	</c:set>
	
	fruits 변수의 값 : ${fruits}
	<ul>
		<c:forEach var="f" items="${fruits}">
			<li> 이번에 먹을 과일은 ${f}입니다.</li>
		</c:forEach>
	</ul>
	<%--
		* colors라는 변수에 4가지 색상, (,)로 구분
		목록 태그로 나열하고 글자 색을 해당 색으로
	 --%>
	<c:set var="colors">
		red, orange, green, blue
	</c:set>
	<ul>
		<c:forEach var="co" items="${colors}">
			<li style="color:${co}">${co}</li>
		</c:forEach>
	</ul>
	<%
		ArrayList<Person> list = new ArrayList<>();
		/*list.add(new Person("아이유", 30, "여자"));
		list.add(new Person("윤하", 35, "여자"));
		list.add(new Person("조인성", 27, "남자"));*/		
	%>
	<c:set var="pList" value="<%= list %>" scope="request" />
	<%-- request.setAttribute("pList", list) --%>
	<table border="1">
		<c:choose>
			<c:when test="${ pList.isEmpty() }">
				조회된 사람이 없습니다.
			</c:when>
			<c:otherwise>
				<thead>
					<tr>
						<th>이름</th>
						<th>나이</th>
						<th>성별</th>
					</tr>
				</thead>
				<tbody>
					<c:forEach var="pSon" items="${pList}">
						<tr>
							<td>${pSon.name}</td>
							<td>${pSon.age}</td>
							<td>${pSon.gender}</td>
						</tr>
					</c:forEach>	
				</tbody>
			</c:otherwise>
		</c:choose>			
	</table>	

	<br><br><br><br><br><br><br><br><br><br><br><br>
</body>
</html>







