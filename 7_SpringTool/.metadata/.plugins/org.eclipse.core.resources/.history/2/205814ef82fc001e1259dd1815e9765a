package com.kh.spring.board.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.kh.spring.board.model.vo.Board;
import com.kh.spring.board.model.vo.Reply;
import com.kh.spring.board.service.BoardService;
import com.kh.spring.common.model.vo.PageInfo;
import com.kh.spring.common.template.Pagination;

@Controller
public class BoardController {
	
	// Spring에서는 @Autowired 기능을 통해서 interface를 객체로 받으면
	// 향후 구현체 이름을 바꾸어도 문제가 없지만, 다른 tool에서는 문제 발생함.
	@Autowired
	private BoardService bService;
	
	/* [list.bo 요청이 들어오는 경우]
	 * - 메뉴에서 "자유게시판" 클릭 시	/list.bo
	 * - "자유게시판" 페이지에서 페이징바 클릭 시 /list.bo?cpage=x
	 */
	
	@RequestMapping("list.bo")
	public String selectList(@RequestParam(value="cpage", defaultValue="1") int currentPage, Model model) {

		// 전체 게시글 수 조회
		int listCount = bService.selectListCount();
		// PageInfo 객체 생성
		PageInfo pi = Pagination.getPageInfo(listCount, currentPage, 10, 5);
		// 게시글 목록 조회
		ArrayList<Board> blist = bService.selectList(pi);
		// 페이징바 정보, 게시글 목록 정보 request에 담아 자유게시판 페이지 포워딩
		model.addAttribute("pi", pi);
		model.addAttribute("blist", blist);
		
		// if ModelandView 객체를 사용시 이런게 가능함
		// mv.addObject("pi", pi)
		//	 .addObject("blist", blist).setViewName("board/boardListView"); :: Method-Chaining
		
		return "board/boardListView";
	}
	
	@RequestMapping("enrollForm.bo")
	public String enrollBoard() {
		
		return "board/boardEnrollForm";
	}
	
	@RequestMapping("insert.bo")
	public String insertBoard(Board b, MultipartFile upfile, HttpSession session, Model model) {
		// 첨부파일이 있는 경우 => 파일명 변경 서버에 저장 + Board b 객체에 파일 정보 저장 
		if (!upfile.getOriginalFilename().equals("")) {
			/*
			// 파일명 수정 후 서버에 업로드
			String orgName = upfile.getOriginalFilename();
			
			String currTime = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
			int randNum = (int)(Math.random()*90000+10000); // 5자리 랜덤값
			String ext = orgName.substring(orgName.lastIndexOf("."));
			
			String chgName = currTime + randNum + ext;
			
			// 업로드할 파일의 물리적인 경로 조회
			String savePath = session.getServletContext().getRealPath("/resources/upfiles/");
	
			try {
				upfile.transferTo(new File(savePath+chgName));
			} catch (IllegalStateException | IOException e) {
				e.printStackTrace();
			}
			*/
			String chgName = saveFile(upfile, session);			
			b.setOriginName(upfile.getOriginalFilename());
			b.setChangeName("resources/upfiles/"+chgName);
		}
		// DB에 게시글 정보 저장 (첨부파일 유무 상관 없이)
	
		// 첨부파일 있는 경우 => (Board b) 제목 / 작성자 / 내용 / 원본파일명 / 수정된파일명
		// 첨부파일 없는 경우 => (Board b) 제목 / 작성자 / 내용
		int result = bService.insertBoard(b);
		
		if (result > 0) {		// 게시글 추가 성공 => 자유게시판 페이지
			session.setAttribute("alertMsg", "성공적으로 게시글이 등록되었습니다.");
			return "redirect:list.bo"; 
		} else {
			model.addAttribute("errorMsg", "게시글 추가 실패");
			return "common/errorPage";
		}
	}
	
	@RequestMapping("detail.bo")
	public ModelAndView selectBoard(int bno, ModelAndView mv ) {
		// bno : 해당 게시글의 번호
		
		// * 해당 게시글의 조회수 증가
		int result = bService.increaseCount(bno);
		
		// - 조회수 증가 성공 시 => 상세페이지(boardDetailView.jsp)에 표시할 데이터를 조회 후 포워딩
		if (result > 0) {
			Board blist = bService.selectBoard(bno);

			mv.addObject("blist", blist)
			  .setViewName("board/boardDetailView");
		} else {		// - 실패 시 => 에러페이지 포워딩
			mv.addObject("errorMsg", "게시물 조회 실패")
			  .setViewName("common/errorPage");
		}
		return mv;
	}
	
	@RequestMapping("delete.bo")
	public String deleteBoard(int bno, String filepath, Model model, HttpSession session) {
		
		int result = bService.deleteBoard(bno);
		
		if(result > 0) {	// 삭제 성공
			if(!filepath.equals("")) {
				// filepath => resources/upfiles/xxxx.png
				// 해당 파일의 물리적인 경로(절대경로) 조회 => 삭제
				new File(session.getServletContext().getRealPath(filepath)).delete();
			}
			
			session.setAttribute("alertMsg", "게시글 삭제 성공했습니다.");
			return "redirect:list.bo";
			
		} else {	// 삭제 실패
			model.addAttribute("errorMsg", "글 삭제에 실패했습니다");
			return "common/errorPage";
		}
	}
	
	@RequestMapping("updateForm.bo")
	public String updateForm(int bno, Model model) {
		model.addAttribute("blist", bService.selectBoard(bno));
		return "board/boardUpdateForm";
	}
	
	@RequestMapping("update.bo")
	public String updateBoard(/*@ModelAttribute*/Board b, MultipartFile upfile, HttpSession session, Model model) {
		// 새로운 첨부파일이 있는 경우
		if (!upfile.getOriginalFilename().equals("")) {
			// 기존 첨부파일 있으면 삭제
			if(b.getOriginName() != null) {
				new File(session.getServletContext().getRealPath(b.getChangeName())).delete();
				
			}
			// 새로 업로드 된 파일 서버 저장
			String chgName = saveFile(upfile, session);
			
			// 새로운 파일의 원본명과 저장명을 Board b 객체 저장
			b.setOriginName(upfile.getOriginalFilename());
			b.setChangeName("resources/upfiles/"+chgName);
		}
		/*
		 * 전달받은 Board(b)객체에는 boardNo, boardTitle, boardContent 필드는 무조건 값이 있음
		 * 1) 새로운 첨부파일 x, 기존 첨부파일 x
		 * 	- originName, changeName : null
		 * 
		 * 2) 새로운 첨부파일 x, 기존 첨부파일 o
		 * 	- originName : 기존 첨부파일 원본명, changeName : 기존 첨부파일 저장된 경로명
		 * 
		 * 3) 새로운 첨부파일 o, 기존 첨부파일 X
		 *  - 새 첨부 파일 서버 저장
		 * 	- originName : 새로운 첨부파일 원본명, changeName : 새로운 첨부파일 저장된 경로명
		 * 
		 * 4) 새로운 첨부파일 o, 기존 첨부파일 o
		 *  - 기존 파일 서버 내 삭제
		 *  - 새로운 첨부파일 서버 저장
		 *  - originName : 새로운 첨부파일 원본명, changeName : 새로운 첨부파일 저장된 경로명
		 */
		// 수정된 정보를 DB에 저장
		int result = bService.updateBoard(b);
		
		if (result > 0) {		// 게시글 추가 성공 => 자유게시판 페이지
			session.setAttribute("alertMsg", "성공적으로 게시글이 등록되었습니다.");
			return "redirect:detail.bo?bno="+b.getBoardNo(); 
		} else {
			model.addAttribute("errorMsg", "게시글 추가 실패");
			return "common/errorPage";
		}
	}
	@ResponseBody
	@RequestMapping(value="rlist.bo", produces="application/json; charset=UTF-8")
	public String selectReply(int bno, Model model) {
		ArrayList<Reply> rlist = bService.selectReplyList(bno);
		
		model.addAttribute("rlist", rlist);
		
		return new Gson().toJson(rlist);
	}
	
	@ResponseBody
	@RequestMapping(value="rinsert.bo", produces="application/json; charset=UTF-8")
	public String insertReply(int bno, Model model) {
	
	}
	// 요청 시 첨부파일이 있는 경우 특정 폴더에 저장시키는 기능을 수행하는 메소드
	public String saveFile(MultipartFile upfile, HttpSession session) {
		String orgName = upfile.getOriginalFilename();
		
		String currTime = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		int randNum = (int)(Math.random()*90000+10000); // 5자리 랜덤값
		String ext = orgName.substring(orgName.lastIndexOf("."));
		
		String chgName = currTime + randNum + ext;
		
		// 업로드할 파일의 물리적인 경로 조회
		String savePath = session.getServletContext().getRealPath("/resources/upfiles/");

		try {
			upfile.transferTo(new File(savePath+chgName));
		} catch (IllegalStateException | IOException e) {
			e.printStackTrace();
		}
		
		return chgName;
	}
}
