package com.kh.spring.member.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.kh.spring.member.model.vo.Member;
import com.kh.spring.member.service.MemberService;
import com.kh.spring.member.service.MemberServiceImpl;

@Controller		// Controller의 어노테이션 작성 시 빈 스캐닝을 통해 자동 Bean 등록이 됨
public class MemberController {

	// private MemberService mService = new MemberServiceImpl();
	@Autowired
	private MemberService mService;
	
//	// 로그인 관련 메소드
//	@RequestMapping(value="login.me")	// RequestMapping타입의 어노테이션 작성 HandlerMapping 등록 
//	public void loginMember() {	
//		
//	}
//	// 회원 가입 관련 메소드
//	@RequestMapping(value="insert.me")
//	public void insertMember() {
//		
//	}
//	
//	// 회원 수정 관련 메소드
//	@RequestMapping(value="update.me")
//	public void updateMember() {
//		
//	}
	/*
	 * * 요청 시 전달되는 데이터에 대한 처리 방법
	 * 
	 * 1) HttpServletRequest 이용 (기존 jsp/servlet 방식)
	 * 		: 해당 메소드의 매개변수로 HttpservletRequest 작성 시
	 * 		 스프링 컨테이너가 해당 메소드 호출 시 자동으로 해당 객체를 생성해서 전달 해 줌
	 */
	// 로그인 관련 메소드
	/*
	@RequestMapping(value="login.me")	 
	public String loginMember(HttpServletRequest request) {
		String userId = request.getParameter("id");
		String userPwd = request.getParameter("pwd");
		
		System.out.println("ID--->"+userId);
		System.out.println("PWD--->"+userPwd);
		
		return "main";
	}
	*/
	/*
	 * 2) @RequestParam 어노테이션 이용
	 * 		=> request.getParameter("키값") : 밸류 // 이 작업을 대체
	 */
	/*
	@RequestMapping("login.me")		// value 생략 가능 (url mapping 값만 작성 시)
	public String loginMember(@RequestParam(value="id", defaultValue="xx") String userId,
							  @RequestParam("pwd") String userPwd) {
		
		System.out.println("ID--->"+userId);
		System.out.println("PWD--->"+userPwd);
		
		return "main";
	}
	*/
	/*
	 * 3) @RequestParam 어노테이션 생략
	 * 		=> 주의!! 매개변수명을 name값(요청 시 데이터의 키값)과 동이랗게 작성해야 자동으로 값이 주입됨
	 */
	/*
	@RequestMapping("login.me")
	public String loginMember(String id, String pwd) {
		
		System.out.println("ID--->"+id);
		System.out.println("PWD--->"+pwd);
		
		return "main";
	}
	*/
	/*
	 * 4) 커맨드 객체 방식
	 * 	  요청 시 전달되는 데이터를 vo클래스로 받고자 하는 경우
	 * 	  매개변수로 해당 vo클래스 타입을 작성한 후
	 * 	  전달되는 데이터 키값을(name 속성) 받고자하는 vo객체의 필드명과 일치해줘야 함
	 * 
	 * 	  스프링 컨테이너가 해당 객체를 기본생성자로 생성 후 setter 메소드를 사용하여
	 *    요청 시 전달되는 값을 해당 필드에 저장
	 *    
	 *    주의!! 반드시 name속성(키값)과 필드명이 동일해야 함!
	 */
	@RequestMapping("login.me")
	public String loginMember(Member m) {
		
		System.out.println(m.getUserId()); 
		System.out.println(m.getUserPwd());
		
		new MemberServiceImpl();
		
		return "main";
	}
}
