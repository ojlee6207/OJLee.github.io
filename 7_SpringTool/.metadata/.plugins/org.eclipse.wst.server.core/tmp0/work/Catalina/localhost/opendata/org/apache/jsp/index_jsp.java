/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-04-22 03:34:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>OpenAPI - 대기오염지수</title>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\" integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"p-5\" align=\"center\">\r\n");
      out.write("        <h2>실시간 대기오염 정보</h2>\r\n");
      out.write("        <br><br>\r\n");
      out.write("        <div class=\"input-group\">\r\n");
      out.write("            <span class=\"input-group-text\">지역</span>\r\n");
      out.write("            <select id=\"location\" class=\"form-select w-25\">\r\n");
      out.write("                <option>서울</option>\r\n");
      out.write("                <option>인천</option>\r\n");
      out.write("                <option>경기</option>\r\n");
      out.write("                <option>강원</option>\r\n");
      out.write("                <option>부산</option>\r\n");
      out.write("            </select>\r\n");
      out.write("            <button id=\"btn1\" class=\"btn btn-success\">대기오염 정보 보기</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <br><br>\r\n");
      out.write("        <table id=\"air-list\" class=\"table table-hover table-striped text-center\">\r\n");
      out.write("            <thead>\r\n");
      out.write("                <tr class=\"table-success\">\r\n");
      out.write("                    <th>측정소</th>\r\n");
      out.write("                    <th>측정일시</th>\r\n");
      out.write("                    <th>통합대기환경수치</th>\r\n");
      out.write("                    <th>미세먼지농도</th>\r\n");
      out.write("                    <th>일산화탄소농도</th>\r\n");
      out.write("                    <th>이산화질소농도</th>\r\n");
      out.write("                    <th>아황산가스농도</th>\r\n");
      out.write("                    <th>오존농도</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody></tbody>\r\n");
      out.write("        </table>\r\n");
      out.write("    </div>\r\n");
      out.write("    <script>\r\n");
      out.write("    	$(function() {\r\n");
      out.write("    		\r\n");
      out.write("    		$(\"#btn1\").click(function() {\r\n");
      out.write("    			\r\n");
      out.write("    			$.ajax({\r\n");
      out.write("    				url:'air.do',\r\n");
      out.write("    				data: { location: $(\"#location\").val()},\r\n");
      out.write("    				success:function(result){\r\n");
      out.write("    					console.log(location);\r\n");
      out.write("    					console.log(result);\r\n");
      out.write("    					const items = result.response.body.items;\r\n");
      out.write("    					console.log(items);\r\n");
      out.write("    					\r\n");
      out.write("    					let value = \"\";\r\n");
      out.write("    					for(let i in items) {\r\n");
      out.write("    						const item = items[i];\r\n");
      out.write("    						\r\n");
      out.write("    						value += \"<tr>\"\r\n");
      out.write("    								+ \"<td>\"+ item.stationName + \"</td>\"\r\n");
      out.write("    								+ \"<td>\"+ item.dataTime + \"</td>\"\r\n");
      out.write("    								+ \"<td>\"+ item.khaiValue + \"</td>\"\r\n");
      out.write("    								+ \"<td>\"+ item.pm10Value + \"</td>\"\r\n");
      out.write("    								+ \"<td>\"+ item.so2Value + \"</td>\"\r\n");
      out.write("    								+ \"<td>\"+ item.coValue + \"</td>\"\r\n");
      out.write("    								+ \"<td>\"+ item.no2Value + \"</td>\"\r\n");
      out.write("    								+ \"<td>\"+ item.o3Value + \"</td>\"\r\n");
      out.write("    								+ \"</tr>\";\r\n");
      out.write("    					}\r\n");
      out.write("    					\r\n");
      out.write("    					$(\"#air-list tbody\").html(value);\r\n");
      out.write("    				},\r\n");
      out.write("    				error:function(){\r\n");
      out.write("    					console.log(\"대기오염 조회 통신 실패!\");	\r\n");
      out.write("    				}\r\n");
      out.write("    				\r\n");
      out.write("    			})\r\n");
      out.write("    		})\r\n");
      out.write("    	})\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
