* 현재 프로젝트에서 JDBC 연동 방식을 사용하는 경우 아래 템플릿 클래스를 완성하시오.

public class JDBCTemplate {

	// Connection 객체 생성용 메소드
	public static Connection getConnection() {
		Connection conn = null;
		Properties prop = new Properties();

		// DB 연동 관련 정보를 driver.properties 파일에 저장 (파일 위치: JDBCTest/src/main/java/db/driver/driver.properties)
		String filepath = JDBCTemplate.class.getResource("/db/driver/driver.properties").getPath();	// 해당 파일의 물리적인 경로 조회 => C:/~/classes/
		// ~~~~/main/java : Source Folder

		try {
			prop.load(new FileInputStream(filepath));

			// JDBC 드라이버 등록
			[ Class.forName. (?)](prop.getProperty("driver"));

			// Connection 객체 생성
			conn = [	Driver.getConnection(?) ](prop.getProperty("url"),
						  prop.getProperty("username"),
						  prop.getProperty("password"));
		} catch(SQLException | IOException e) {
			e.printStackTrace();
		}

		return conn;

	}

	// commit용 메소드
	public static void commit([ Connection ] conn) {
		try {
			if (conn != null && !conn.isClosed()) {
				conn.commit();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// rollback용 메소드
	public static void rollback([ Connection ] conn) {
		try {
			if (conn != null && !conn.isClosed()) {
				conn.rollback();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// close용 메소드
	public static void close([ Connection ] conn) {
		try {
			if (conn != null && !conn.isClosed()) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void close([ Statement ] stat) {
		try {
			if (stat != null && !stat.isClosed()) {
				stat.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void close([ ResultSet ] rset) {
		try {
			if (rset != null && !rset.isClosed()) {
				rset.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}


